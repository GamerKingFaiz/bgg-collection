{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","gameList","_this2","username","URL","document","location","searchParams","get","fetch","then","response","json","games","ownedGames","filter","game","owned","forEach","rank","setState","columns","Header","accessor","maxWidth","Cell","props","react_default","a","createElement","src","value","height","alt","className","minWidth","style","whiteSpace","href","original","gameId","target","rel","yearPublished","defaultSortDesc","backgroundColor","Math","round","title","es","data","defaultSorted","id","desc","defaultPageSize","Component","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6QAwHeA,qBA/Gd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACZC,SAAU,IAHER,mFAOM,IAAAS,EAAAN,KAGfO,EADU,IAAIC,IAAIC,SAASC,UAAWC,aACpBC,IAAI,YAI1BC,MAFc,iDAAmDN,EAAW,iBAG3EO,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACL,IAAIC,EAAa,IACjBA,EAAaD,EAAME,OAAO,SAAAC,GAAI,OAAmB,IAAfA,EAAKC,SAC5BC,QAAQ,SAACF,IACA,IAAfA,EAAKG,OACRH,EAAKG,KAAO,SAGdjB,EAAKkB,SAAS,CAAEnB,SAAUa,uCAK3B,IAAMO,EAAU,CACf,CACCC,OAAQ,OACRC,SAAU,OACVC,SAAU,IAEX,CACCF,OAAQ,GACRC,SAAU,YACVC,SAAU,IACVC,KAAM,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,IAAMJ,EAAMK,MAAQC,OAAO,KAAKC,IAAI,YAAYC,UAAU,gBAE/E,CACCZ,OAAQ,QACRC,SAAU,OACVY,SAAU,IACVX,SAAU,IACVY,MAAO,CAAEC,WAAc,SACvBZ,KAAM,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,WACXF,EAAAC,EAAAC,cAAA,KAAGS,KAAO,uCAAyCZ,EAAMa,SAASC,OAASC,OAAO,SAASC,IAAI,uBAC5FhB,EAAMK,OAFE,IAGNJ,EAAAC,EAAAC,cAAA,QAAMK,UAAU,iBAAhB,IAAmCR,EAAMa,SAASI,cAAlD,QAGV,CACCrB,OAAQ,aACRC,SAAU,gBACVqB,iBAAiB,EACjBpB,SAAU,IACVC,KAAM,SAAAC,GAAK,OAAKC,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBAC1BP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,gBAEbE,MAAO,CAACS,gBACRC,KAAKC,MAAM,GAAKrB,EAAMK,OAAO,IAAM,EAAI,UACrCe,KAAKC,MAAM,GAAKrB,EAAMK,OAAO,IAAM,EAAK,UACxCe,KAAKC,MAAM,GAAKrB,EAAMK,OAAO,IAAM,EAAK,UACxCe,KAAKC,MAAM,GAAKrB,EAAMK,OAAO,IAAM,EAAK,UACxCe,KAAKC,MAAM,GAAKrB,EAAMK,OAAO,IAAM,EAAK,UACxC,YAGDe,KAAKC,MAAM,GAAKrB,EAAMK,OAAO,OAKtC,CACCT,OAAQ,cACRC,SAAU,aACVC,SAAU,KAEX,CACCF,OAAQ,cACRC,SAAU,aACVqB,iBAAiB,EACjBpB,SAAU,KAEX,CACCF,OAAQ,YACRC,SAAU,cACVqB,iBAAiB,EACjBpB,SAAU,KAEX,CACCF,OAAQ,UACRC,SAAU,cACVE,KAAM,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKmB,MAAQtB,EAAMK,OAAUL,EAAMK,UAIpD,OACCJ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACCC,KAAOtD,KAAKI,MAAMC,SAClBoB,QAAUA,EACV8B,cAAgB,CAAC,CAAEC,GAAI,OAAQC,MAAM,IACrCC,gBAAkB,YA1GJC,cCKEC,QACW,cAA7BC,OAAOnD,SAASoD,UAEe,UAA7BD,OAAOnD,SAASoD,UAEhBD,OAAOnD,SAASoD,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASzD,SAAS0D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxD,KAAK,SAAAyD,GACjCA,EAAaC","file":"static/js/main.b3d42ad8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// Import React Table\nimport ReactTable from 'react-table'\nimport 'react-table/react-table.css'\n\nclass App extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tgameList: []\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\t/* Grabbing the URL params */\n\t\tlet params = (new URL(document.location)).searchParams;\n\t\tlet username = params.get(\"username\");\n\t\t\n\t\tlet jsonUrl = 'https://bgg-json.azurewebsites.net/collection/' + username + '?grouped=true';\n\n\t\tfetch(jsonUrl)\n\t\t.then(response => response.json())\n\t\t.then(games => {\n\t\t\tlet ownedGames = [];\n\t\t\townedGames = games.filter(game => game.owned === true); // Filtering for only owned games \n\t\t\townedGames.forEach((game) => {\n\t\t\t\tif (game.rank === -1) {\n\t\t\t\t\tgame.rank = 'N/A';\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.setState({ gameList: ownedGames });\n\t\t})\n\t}\n\n\trender() {\n\t\tconst columns = [\n\t\t\t{\n\t\t\t\tHeader: 'Rank',\n\t\t\t\taccessor: 'rank',\n\t\t\t\tmaxWidth: 75\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: '',\n\t\t\t\taccessor: 'thumbnail',\n\t\t\t\tmaxWidth: 120,\n\t\t\t\tCell: props => <img src={ props.value } height=\"64\" alt=\"thumbnail\" className='thumbnail' />\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: 'Title',\n\t\t\t\taccessor: 'name',\n\t\t\t\tminWidth: 150,\n\t\t\t\tmaxWidth: 450,\n\t\t\t\tstyle: { 'whiteSpace': 'unset'}, // Allows word wrap\n\t\t\t\tCell: props => <div>\n\t\t\t\t\t\t\t\t<a href={ 'https://boardgamegeek.com/boardgame/' + props.original.gameId } target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t\t\t\t\t\t\t\t{ props.value }\n\t\t\t\t\t\t\t\t</a> <span className='yearPublished'>({ props.original.yearPublished })</span>\n\t\t\t\t\t\t\t   </div>\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: 'Avg Rating',\n\t\t\t\taccessor: 'averageRating',\n\t\t\t\tdefaultSortDesc: true,\n\t\t\t\tmaxWidth: 100,\n\t\t\t\tCell: props => \t<div className='ratingContainer'>\n\t\t\t\t\t\t\t\t\t<div className='averageRating'\n\t\t\t\t\t\t\t\t\t\t/* Setting background colors for the different ranges */\n\t\t\t\t\t\t\t\t\t\t style={{backgroundColor:\n\t\t\t\t\t\t\t\t\t\t\tMath.round(10 * props.value)/10 >= 9 ? '#249563' // Rounding to the tenths place\n\t\t\t\t\t\t\t\t\t\t\t: Math.round(10 * props.value)/10 >= 8 ?  '#2fc482'\n\t\t\t\t\t\t\t\t\t\t\t: Math.round(10 * props.value)/10 >= 7 ?  '#1d8acd'\n\t\t\t\t\t\t\t\t\t\t\t: Math.round(10 * props.value)/10 >= 5 ?  '#5369a2'\n\t\t\t\t\t\t\t\t\t\t\t: Math.round(10 * props.value)/10 >= 3 ?  '#df4751'\n\t\t\t\t\t\t\t\t\t\t\t: '#db303b'}}>\n\n\t\t\t\t\t\t\t\t\t\t{ /* The average rating number to be displayd */ }\n\t\t\t\t\t\t\t\t\t\t{ Math.round(10 * props.value)/10 }\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: 'Min Players',\n\t\t\t\taccessor: 'minPlayers',\n\t\t\t\tmaxWidth: 100\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: 'Max Players',\n\t\t\t\taccessor: 'maxPlayers',\n\t\t\t\tdefaultSortDesc: true,\n\t\t\t\tmaxWidth: 100\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: 'Play Time',\n\t\t\t\taccessor: 'playingTime',\n\t\t\t\tdefaultSortDesc: true,\n\t\t\t\tmaxWidth: 100\n\t\t\t},\n\t\t\t{\n\t\t\t\tHeader: 'Comment',\n\t\t\t\taccessor: 'userComment',\n\t\t\t\tCell: props => <div title={ props.value }>{ props.value }</div> // Longs comments will cutoff. Hover reveals tooltip with full comment\n\t\t\t}\n\t\t]\n\n\t\treturn (\n\t\t\t<ReactTable \n\t\t\t\tdata={ this.state.gameList }\n\t\t\t\tcolumns={ columns }\n\t\t\t\tdefaultSorted={ [{ id: \"rank\", desc: false }] }\n\t\t\t\tdefaultPageSize={ 50 }\n\t\t\t/>\n\t\t)\n\t}\n\t\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}